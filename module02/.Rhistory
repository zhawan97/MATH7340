is.vector(gendat)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
library(multtest)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.17")
.libPaths()
BiocManager::install(c("PKG1", "PKG2", "PKG3"))
library(multtest)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("multtest")
data(golub)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.17")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
.libPaths()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("multtest")
if (!require("BiocManager", quietly = TRUE, force = TRUE))
install.packages("BiocManager")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager", force = TRUE)
BiocManager::install("multtest")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
library(multtest)
data("golub")
golub.gnames[1042,]
str(golub)
golub[1042,2]
golub[1042,]
gol.fac <- factor(golub.cl, levels = 0:1, labels = c("ALL", "AML"))
golub[1042,gol.fac=="ALL"]
meanALL <- apply(golub[,gol.fac=="ALL"], 1, mean)
meanALL
grep("CD33",golub.gnames[,2])
labels=c("lab1","lab2","lab3","lab4") # Four categories
x=sample(labels,10,replace=T) # Create a data set with 10 observations: categorical values
x # Display the data set
table(x)
pie(table(x))
barplot(table(x),main="Barplot")
labels=c("lab1","lab2","lab3","lab4") # Four categories
x=sample(labels,10,replace=T) # Create a data set with 10 observations: categorical values
x # Display the data set
x <- c((1:10)/10, (1:9)/3)
x  # print x values
hist(x)
boxplot(golub[1042,] ~ gol.fac)
sex=sample(c("Male","Female"),10,replace=T)
smoke=sample(c("Smoke","Unsmoke"),10,replace=T)
table(sex,smoke)
x <- 1:10
y <- x^2
plot(x,y) # Same as plot(y~x)
plot(x,y,xlab="x-label",ylab="Y-label", main="This is the title", type="o", col="blue",pch="+",cex=2)
z <- y/2
plot(y~x,col="blue",type="o",ylab="y and z")
lines(x,z,col="red",type="o")
legend("topleft",c("this is y","this is z"),col=c("blue","red"),lty=c(1,1))
data(golub)
gol.fac <- factpre(golub.cl, levels=0:1, labels=c("ALL", "AML"))
gol.fac <- factor(golub.cl, levels=0:1, labels=c("ALL", "AML"))
meanALL <- apply(golub[,gol.fac=="ALL"], 1, mean)
meanALL
max.print
getOption("max.print")
max(meanALL)
meanALL_vector <- as.vector(meanALL)
largest <- order(meanALL_vector, decreasing = TRUE)[1:3]
meanALL_vector[largest]
golub.gnames[1042,]
grep(3.278551)
grep("CD33")
grep("CD33", golub.gnames[,2])
grep("CD33", golub.gnames[2])
grep("CD33", golub.gnames[,2])
meanALL
largest <- order(meanALL_vector, decreasing = TRUE)[1:3]
largest
largest <- order(meanALL_vector, decreasing = TRUE)[1:3]
gol.fac <- factor(golub.cl, levels=0:1, labels=c("ALL", "AML"))
meanALL <- apply(golub[,gol.fac=="ALL"], 1, mean)
meanALL_vector <- as.vector(meanALL)
largestALL <- order(meanALL_vector, decreasing = TRUE)[1:3] # Get largest mean expression value for ALL
largestALL
golub[2784,]
golub.gnames[2784]
golub.gnames[2478]
golub.gnames[2784,]
class(largestALL)
largestALL[1]
golub.gnames[largestALL[1],]
meanAML <- apply(golub[,golfac=="AML"], 1, mean)
meanAML <- apply(golub[,gol.fac=="AML"], 1, mean)
meanAML_vector <- as.vector(meanAML)
largestAML <- order(meanAML_vector, decreasing = TRUE)[1:3] # Get largest mean expression value for AML
largestAML
golub.gnames[largestAML[1],]
golub.gnames[largestALL[1],]
golub.gnames[largestALL[2],]
golub.gnames[largestALL[3],]
golub.gnames[largestAML[1],]
golub.gnames[largestAML[2],]
golub.gnames[largestAML[3],]
golub[,gol.fac=="AML"]
golub[1,1]
golub[2,1]
golublst <- c(golub[1,1],golub[2,1],golub[3,1],golub[4,1],golub[5,1])
golublst
golubdf = data.frame(golublst)
golubdf
write.table(golubdf,"golubdata.csv")
golub[1,1,gol.fac=="AML"]
golub[,gol.fac=="AML"]
AMLlst <- golub[,gol.fac=="AML"]
AMLlst
AMLlst <- golub[,gol.fac=="AML"]
AML5 <- c(AMLlst[1,1],AMLlst[2,1],AMLlst[3,1],AMLlst[4,1],AMLlst[5,1]) # initialize data
golubdf = data.frame(AML5)
write.table(golubdf,"AML5.csv")
ALLlst <- golub[,gol.fac=="ALL"]
ALL5 <- c(ALLlst[1,1],ALLlst[2,1],ALLlst[3,1],ALLlst[4,1],ALLlst[5,1]) # initialize data
golubdf = data.frame(ALL5)
write.table(golubdf,"ALL5.csv")
golub[200,1]
golub[100,1]
patient1_vec <- c()
col_indices <- c(100:200)
row_indices <- c(100:200)
for (i in 1:length(row_indices)) {
patient1_vec <- c(patient1_vec, golub[i,1])
}
patient1_vec
standard_deviation <- sd(patient1_vec)
standard_deviation
standard_deviation_all <- apply(golub, 1, sd)
standard_deviation_all
threshold_vec <- c()
for (i in 1:length(standard_deviation_all)) {
if (standard_deviation_all[i] > 1) {
threshold_vec <- c(threshold_vec, standard_deviation_all[i])
}
}
length(threshold_vec)
standard_deviation_patient1
row_indices <- c(100:200)
for (i in 1:length(row_indices)) {
patient1_vec <- c(patient1_vec, golub[i,1])
}
standard_deviation_patient1 <- sd(patient1_vec)
standard_deviation_patient1
x <- golub[101]
x
y <- golub[102]
y
golub.gnames[101]
golub.gnames[102]
golub.gnames[102,]
x <- golub[101,]
x
y <- golub[102,]
golub.gnames[102,]
golub.gnames[101,]
plot(x,y,xlab="NUCLEAR PORE COMPLEX PROTEIN NUP214",ylab="PHOSPHATIDYLSERINE SYNTHASE I")
library(ALL)
library("ALL")
data("ALL")
data(all)
data(ALL)
exprs(ALL[,ALL$BT=="B1"]
q
library(BiocVersion)
library(ALL)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ALL")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ALL")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ALL")
browseVignettes("ALL")
str(ALL)
BiocManager::install("ALL")
Sys.chmod("C:\R-4.3.1", "777")
Sys.chmod("C:\R-4.3.1\library\Matrix\libs\x64\Matrix.dll", "777")
Sys.chmod("C:/R-4.3.1/library/Matrix/libs/x64/Matrix.dll", "777")
BiocManager::install("ALL")
load("C:/Users/zhawa/Documents/MATH7340/module02/.RData")
install.packages("ALL", lib="C:/R-4.3.1/library")
data(gobul)
library(ALL)
library(BiocManager)
library(multtest)
data(ALL)
exprs(ALL[,ALL$BT=="B1"])
hist(exprs(ALL[,ALL$BT=="B1"])
q
ALL[,ALL$BT=="B1"]
openVignette(ALL)
str(ALL)
exprs(ALL[,ALL$BT=="B1"])
matrix_data <- exprs(ALL[,ALL$BT=="B1"])
hist(matrix_data)
apply(matrix_data, 1, mean)
apply(matrix_data, 1, mean) # mean gene expressions
B1vector <- as.vector(matrix_data)
largestB1 <- order(B1vector, decreasing = TRUE)[1:3] # 3 largest gene expressions
largestB1
ALL[89913]
ALL[89913,]
data(trees)
Girth
girth
$Girht
$Girth
trees[girth]
trees
trees[1]
trees[1,2]
trees[1,]
trees[,1]
trees
girth <- trees[,1]
girth
height <- trees[,2]
volume <- trees[,3]
plot(girth,height)
plot(girth,height,xlab="Girth",ylab="Height",col="blue",pch="+")
points(girth,volume)
points(girth,volume,col="black",pch="o",ylim=c(0,90))
plot(girth,height,xlab="Girth",ylab="Height/Volume",col="blue",pch="+",ylim=c(0,90))
points(girth,volume,col="black",pch="o")
