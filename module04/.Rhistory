x<-rgamma(n=100000, shape=3, scale=5) #generate the random sample
#print results on this random sample. "\n" to continue printing in a new line.
cat("(a) P(1<X<10)=", mean(1<x & x<10), "\n (b) E(X) = ", mean(x), "\n(c) sd(X)=", sd(x), "\n(d)Var(X)=", var(x), "\n")
x<-c(4,7,2) #store the values of Xs in a vector #product of univariate densities evaluated at each X element
prod(dexp(x, rate=1.5))
c(rpois(n=1, lambda=1), rpois(n=1, lambda=2), rpois(n=1, lambda=3))
cbind(rpois(n=20, lambda=1), rpois(n=20, lambda=2), rpois(n=20, lambda=3))
require(mvtnorm)#load library “mvtnorm”
require(gplots) #load library “gplots”
par(mfrow=c(2,2)) #put four plots in 2 rows by 2 columns
#generate random data from a bivariate normal distribution
my.data< rmvnorm(10000,mean=c(1,2),sigma=matrix(c(1,0.9,0.9,1),nrow=2))
require(mvtnorm)
require(mvtnorm) # get pdf for dmvnorm()
persp(my.hist$x,my.hist$y, matrix(dmvnorm(cbind(rep(my.hist$x,rep(20,20)),my.hist$y),mean=c(1,2),sigma=matrix(c(1,0,0,1),nrow=2)),nrow=20) ,xlab="X",ylab="Y",zlab="pdf")
my.data.3<-matrix(rpois(3*1000,2),nrow=3)
my.stat.3<-sqrt(3)*(apply(my.data.3,2,mean)-2)
my.data.30<-matrix(rpois(30*1000,2),nrow=30)
my.stat.30<-sqrt(30)*(apply(my.data.30,2,mean)-2)
par(mfrow=c(2,2))
hist(my.stat.3, freq = FALSE, main="histogram when n=3",xlab="S")
curve(dnorm(x,mean=0,sd=sqrt(2)),col=2,add=T)
qqplot(qnorm(ppoints(1000), mean=0,sd=sqrt(2)), my.stat.3, main = "Q-Q plot when n=3",xlab="",ylab="S")
qqline(my.stat.3, distribution = function(p) qnorm(p,mean=0,sd=sqrt(2)), col=2)
hist(my.stat.30, freq = FALSE, main="histogram when n=30",xlab="S")
curve(dnorm(x,mean=0,sd=sqrt(2)),col=2,add=T)
qqplot(qnorm(ppoints(1000), mean=0,sd=sqrt(2)), my.stat.30, main = "Q-Q plot when n=30",xlab="",ylab="S")
qqline(my.stat.30, distribution = function(p) qnorm(p,mean=0,sd=sqrt(2)), col=2)
pnorm(20, mean = 14, sd = sqrt(4.2)/sqrt(100)) - pnorm(15, mean = 14, sd = sqrt(4.2)/sqrt(100))
require(mvtnorm) # get pdf for dmvnorm()
nsim= 100
XmeanLess.sim<- rep(NA,nsim) # Define an empty matrix to store data
for (i in 1:nsim) {
data.sim<-rmvnorm(2, mean = c(7,12), sigma = matrix(c(3,3,3,7)), nrow = 2)
mean.sim<-apply(data.sim, 1, mean) #Find the mean of data.sim
Xmean<-mean.sim[1]
Ymean<-mean.sim[2]
XmeanLess.sim[i] <- (Xmean+0.5<Ymean) # logical statement, read the question to see why I wrote this
}
nsim= 100
XmeanLess.sim<- rep(NA,nsim) # Define an empty matrix to store data
for (i in 1:nsim) {
data.sim<-rmvnorm(2, mean = c(7,12), sigma = matrix(c(3,3,3,7)))
mean.sim<-apply(data.sim, 1, mean) #Find the mean of data.sim
Xmean<-mean.sim[1]
Ymean<-mean.sim[2]
XmeanLess.sim[i] <- (Xmean+0.5<Ymean) # logical statement, read the question to see why I wrote this
}
mean(XmeanLess.sim) # Mean of all the MC simulations
require(mvtnorm) # get pdf for dmvnorm()
nsim= 100
mu <- c(7,12)
sig <- matrix(c(3,3,3,7), nrow = 2)
XmeanLess.sim<- rep(NA,nsim) # Define an empty matrix to store data
for (i in 1:nsim) {
data.sim<-rmvnorm(2, mean = mu, sigma = sig)
mean.sim<-apply(data.sim, 1, mean) #Find the mean of data.sim
Xmean<-mean.sim[1]
Ymean<-mean.sim[2]
XmeanLess.sim[i] <- (Xmean+0.5<Ymean) # logical statement, read the question to see why I wrote this
}
require(mvtnorm) # get pdf for dmvnorm()
nsim= 100
mu <- c(7,12)
sig <- matrix(c(3,3,3,7), nrow = 2)
XmeanLess.sim<- rep(NA,nsim) # Define an empty matrix to store data
for (i in 1:nsim) {
data.sim<-rmvnorm(2, mean = mu, sigma = sig)
mean.sim<-apply(data.sim, 1, mean) #Find the mean of data.sim
Xmean<-mean.sim[1]
Ymean<-mean.sim[2]
XmeanLess.sim[i] <- (Xmean+0.5<Ymean) # logical statement, read the question to see why I wrote this
}
data.sim<-rmvnorm(2, mean = mu, sigma = matrix(c(3,3,3,7), nrow = 2))
data.sim<-rmvnorm(2, mean=mu, sigma=sig)
Ymean<-mean.sim[2]
data.sim<-rmvnorm(3, mean=mu, sigma=sig)
data.sim<-rmvnorm(2, mean=mu, sigma=sig)
XmeanLess.sim[i] <- (Xmean+0.5<Ymean) # logical statement, read the question to see why I wrote this
data.sim<-rmvnorm(2, mean=mu, sigma=sig)
require(mvtnorm) # get pdf for dmvnorm()
nsim= 100
mu <- c(7,12)
sig <- matrix(c(3,3,3,7), nrow = 2)
XmeanLess.sim<- rep(NA,nsim)
data.sim<-rmvnorm(2, mean=mu, sigma=sig)
data.sim<-rmvnorm(2, mean=mu, sigma=matrix(c(3,3,3,7), nrow = 2))
install.packages("mvtnorm")
matrix(c(3,3,3,7), nrow = 2)
require(mvtnorm) # get pdf for dmvnorm()
nsim= 100
mu <- c(7,12)
sig <- matrix(c(3,3,3,7), nrow = 2)
XmeanLess.sim<- rep(NA,nsim) # Define an empty matrix to store data
for (i in 1:nsim) {
data.sim<-rmvnorm(2, mean=mu, sigma=sig)
mean.sim<-apply(data.sim, 1, mean) #Find the mean of data.sim
Xmean<-mean.sim[1]
Ymean<-mean.sim[2]
XmeanLess.sim[i] <- (Xmean+0.5<Ymean) # logical statement, read the question to see why I wrote this
q
exit
quit
quit
x
exit()
quit()
require(mvtnorm) # get pdf for dmvnorm()
nsim= 100
mu <- c(7,12)
sig <- matrix(c(3,3,3,7), nrow = 2)
XmeanLess.sim<- rep(NA,nsim) # Define an empty matrix to store data
for (i in 1:nsim) {
data.sim<-rmvnorm(2, mean=mu, sigma=sig)
mean.sim<-apply(data.sim, 1, mean) #Find the mean of data.sim
Xmean<-mean.sim[1]
Ymean<-mean.sim[2]
XmeanLess.sim[i] <- (Xmean+0.5<Ymean) # logical statement, read the question to see why I wrote this
}
mean(XmeanLess.sim) # Mean of all the MC simulations
mean(XmeanLess.sim) + c(-1,1)*1.96*sqrt(var(XmeanLess.sim)/10000) # confidence interval
XmeanLess.sim
X.chi <- dchisq(x,df=8)
x.gamma <- dgamma(x,shape=1,scale=2)
x.t <- dt(x,df=8)^2
E.Y <- (sqrt(x.chi)*x.gamma)+(4*x.t)
X.chis <- dchisq(x,df=8)
x.gamma <- dgamma(x,shape=1,scale=2)
x.t <- dt(x,df=8)^2
E.Y <- (sqrt(x.chi)*x.gamma)+(4*x.t)
X.chis <- dchisq(x,df=8)
x.gamma <- dgamma(x,shape=1,scale=2)
x.t <- dt(x,df=8)^2
E.Y <- (sqrt(x.chis)*x.gamma)+(4*x.t)
X_chis <- dchisq(x,df=8)
x_gamma <- dgamma(x,shape=1,scale=2)
x_t <- dt(x,df=8)^2
E_Y <- (sqrt(x_chis)*x_gamma)+(4*x_t)
X_chis <- dchisq(x,df=8)
X.chis <- dchisq(x,df=8)
x.chis
print(x.chis)
X.chis <- dchisq(x,df=8)
x.gamma <- dgamma(x,shape=1,scale=2)
x.t <- dt(x,df=8)^2
X.chis <- dchisq(x,df=8)$value
X.chis <- sqrt(dchisq(x,df=8))
E.Y <- (x.chis*x.gamma)+(4*x.t)
x.chis*x.gamma
x.chis
print(x.chis)
mean.chis <- mean(x.chis)
mean(dchisq(x,8))
mean(dchisq(x,df=8))
X.chis <- mean(dchisq(x,8))
x.gamma <- mean(dgamma(x,shape=1,scale=2))
x.t <- mean(dt(x,df=8)^2)
E.Y <- (sqrt(x.chis)*x.gamma)+(4*x.t)
X.chis
sqrt(x.chis)
chis <- mean(dchisq(x,8))
sqrt(chis)
chis <- mean(dchisq(x,8))
gamma <- mean(dgamma(x,shape=1,scale=2))
t <- mean(dt(x,df=8)^2)
E.Y <- (sqrt(chis)*gamma)+(4*t)
pritn(E.Y)
print(E.Y)
x1 <- rchisq(10000,8)
x2 <- rgamma(10000,1,2)
x3 <- rt(10000,5)
y <- sqrt(x1)*x2+(4*x3^2)
print(y)
mean(y)
f.x <- exp(-x)exp(-exp(-x))
exp(-x)
f.x <- exp(-x)
f.x <- exp(-x)*exp(-x)*exp(-x)
plot(f.x)
rnorm(x,mean,sd)
rnorm(1000,mean,sd)
rnorm(1000,1,1)
max(rnorm(n,1,1))
n <- 10000\
n <- 10000
max(rnorm(n,1,1))
n = 1000
maxima_vec <- c() # create empty vector
an <- sqrt(2*log(n)) - 0.5*(log(log(n))+log(4*pi))*(2*log(n))^(-1/2)
bn <- (2*log(n))^(-1/2)
f.x <- exp(-x)*exp(-x)*exp(-x)
for (i in 1:1000) {
max_r <- max(rnorm(n,1,1))
append(maxima_vec, max_r)
}
print(maxima_vec)
n = 1000
maxima_vec <- c() # create empty vector
an <- sqrt(2*log(n)) - 0.5*(log(log(n))+log(4*pi))*(2*log(n))^(-1/2)
bn <- (2*log(n))^(-1/2)
f.x <- exp(-x)*exp(-x)*exp(-x)
for (i in 1:1000) {
max_r <- max(rnorm(n,1,1))
append(maxima_vec, max_r)
}
print(maxima_vec)
n = 1000
maxima_vec <- c() # create empty vector
an <- sqrt(2*log(n)) - 0.5*(log(log(n))+log(4*pi))*(2*log(n))^(-1/2)
bn <- (2*log(n))^(-1/2)
f.x <- exp(-x)*exp(-x)*exp(-x)
for (i in 1:1000) {
max_r <- max(rnorm(n,1,1))
insert(maxima_vec, max_r)
}
n = 1000
maxima <- c() # create empty vector
an <- sqrt(2*log(n)) - 0.5*(log(log(n))+log(4*pi))*(2*log(n))^(-1/2)
bn <- (2*log(n))^(-1/2)
f.x <- exp(-x)*exp(-x)*exp(-x)
for (i in 1:1000) {
max_r <- max(rnorm(n,1,1))
maxima_vec <- append(maxima, max_r)
}
print(maxima_vec)
maxima
maxima_vec
n = 1000
an <- sqrt(2*log(n)) - 0.5*(log(log(n))+log(4*pi))*(2*log(n))^(-1/2)
bn <- (2*log(n))^(-1/2)
f.x <- exp(-x)*exp(-x)*exp(-x)
for (i in 1:1000) {
max_r <- max(rnorm(n,1,1))
maxima <- c(max_r)
}
print(maxima)
maxima
for (i in 1:1000) {
max_r <- max(rnorm(n,1,1))
maxima <- append(maxima,max_r)
}
print(maxima)
for (i in maxima) {
maxima[i] <- (maxima[i]-an)/bn
}
print(maxima)
plot(maxima)
plot(rnorm(1000,1,1))
rnorm(1000,1,1)
max(rnorm(1000,1,1))
for (i in 1:1000) {
max_r <- max(rnorm(n,1,1))
normalize <- (max_r-an)/bn
}
plot(normalize)
normalize
max_r
for (i in 1:n) {
max_r <- max(rnorm(n,1,1))
normalize <- (max_r-an)/bn
}
max_r
for (i in 1:n) {
max_r <- max(rnorm(n,1,1))
normalize <- (max_r-an)/bn
plot(normalize)
}
q
rbind(max(rnorm(1000,1,1)))
plot(max(rnorm(10,1,1)))
n=10
for (i in 1:n) {
max_r <- max(rnorm(n,1,1))
normalize <- (max_r-an)/bn
}
for (i in 1:n) {
max_r <- max(rnorm(1000,1,1))
normalize <- (max_r-an)/bn
}
for (i in 1:n) {
max_r <- max(rnorm(1000,1,1))
normalize <- (max_r-an)/bn
plot(normalize)
}
n <- 1000
# Number of iterations
num_iterations <- 1000
# Initialize a vector to store maximum values
max_values <- numeric(num_iterations)
# Generate maximum values from random samples
for (i in 1:num_iterations) {
samples <- rnorm(n, mean = 1, sd = 1)
max_values[i] <- max(samples)
}
# Create a histogram to visualize the maximum values
hist(max_values, main = "Maximum Values from rnorm(1000, 1, 1)", xlab = "Maximum Value")
# Optionally, add a density curve to the histogram
lines(density(max_values), col = "blue", lwd = 2)
# Set the seed for reproducibility
set.seed(42)
# Number of samples
n <- 1000
# Number of iterations
num_iterations <- 1000
# Initialize a vector to store maximum values
max_values <- numeric(num_iterations)
# Generate maximum values from random samples
for (i in 1:num_iterations) {
samples <- rnorm(n, mean = 1, sd = 1)
max_values[i] <- max(samples)
}
# Create a histogram to visualize the maximum values
hist(max_values, main = "Maximum Values from rnorm(1000, 1, 1)", xlab = "Maximum Value")
# Set the seed for reproducibility
set.seed(42)
# Number of samples
n <- 1000
# Number of iterations
num_iterations <- 1000
# Initialize a vector to store maximum values
max_values <- numeric(num_iterations)
# Generate maximum values from random samples
for (i in 1:num_iterations) {
samples <- rnorm(n, mean = 1, sd = 1)
max_values[i] <- max(samples)
}
# Create a histogram to visualize the maximum values
plot(max_values, main = "Maximum Values from rnorm(1000, 1, 1)", xlab = "Maximum Value")
for (i in 1:n) {
max_r <- max(rnorm(1000,1,1))
normalize[i] <- (max_r-an)/bn
}
plot(normalize)
plot(f.x)
lines(f.x)
plot(dnorm(x,1,1))
dnorm(x)
plot(dnorm(x))
plot(normalize)
plot(dnorm(x))
plot(rnorm(1000))
for (i in 1:n) {
max_r <- max(rnorm(1000))
normalize[i] <- (max_r-an)/bn
}
plot(dnorm(x))
plot(normalize)
lines(normalize, col="blue")
plot(normalize)
lines(predict(normalize), col="blue")
scatter.smooth(normalize)
for (i in 1:n) {
max_r <- max(rnorm(1000))
normalize[i] <- (max_r-an)/bn
}
plot(normalize)
scatter.smooth(normalize)
plot(dnorm(x))
plot(normalize)
lines(f.x,col="red")
plot(f.x)
lines(f.x,col="red")
plot(normalize, xlim = c(1,3), ylim = c(0,0.0025))
lines(normalize,col="red")
plot(f.x)
plot(rnorm(1000))
max(plot(rnorm))
max(plot(rnorm(1000)))
lines(dnorm(x))
n = 1000
an <- sqrt(2*log(n)) - 0.5*(log(log(n))+log(4*pi))*(2*log(n))^(-1/2)
bn <- (2*log(n))^(-1/2)
f.x <- exp(-x)*exp(-x)*exp(-x)
for (i in 1:n) {
max_r <- max(rnorm(1000))
normalize[i] <- (max_r-an)/bn
}
plot(normalize)
x2 <- seq(min(x), max(x), length = 1000)
fun <- dnorm(x2, mean = mean(x), sd = sd(x))
lines(x2, fun, col = 2, lwd = 2)
plot(fun)
n = 1000
an <- sqrt(2*log(n)) - 0.5*(log(log(n))+log(4*pi))*(2*log(n))^(-1/2)
bn <- (2*log(n))^(-1/2)
f.x <- exp(-x)*exp(-x)*exp(-x)
for (i in 1:n) {
max_r <- max(rnorm(1000))
normalize[i] <- (max_r-an)/bn
}
plot(normalize)
lines(x2, fun, col = "red", lwd = 2)
lines(x2, fun, col = "red", lwd = 10)
n = 1000
an <- sqrt(2*log(n)) - 0.5*(log(log(n))+log(4*pi))*(2*log(n))^(-1/2)
bn <- (2*log(n))^(-1/2)
f.x <- exp(-x)*exp(-x)*exp(-x)
for (i in 1:n) {
max_r <- max(rnorm(1000))
normalize[i] <- (max_r-an)/bn
}
plot(normalize,xlim = c(0,max(fun)),ylim = c(min(fun),max(fun)))
scatter.smooth((normalize,xlim = c(0,max(fun)),ylim = c(min(fun),max(fun))))
scatter.smooth(normalize,xlim = c(0,max(fun)),ylim = c(min(fun),max(fun)))
n = 1000
an <- sqrt(2*log(n)) - 0.5*(log(log(n))+log(4*pi))*(2*log(n))^(-1/2)
bn <- (2*log(n))^(-1/2)
f.x <- exp(-x)*exp(-x)*exp(-x)
x2 <- seq(min(x), max(x), length = 1000)
fun <- dnorm(x2, mean = mean(x), sd = sd(x))
for (i in 1:n) {
max_r <- max(rnorm(1000))
normalize[i] <- (max_r-an)/bn
}
scatter.smooth(normalize)
lines(fun)
lines(fun, col="red", lwd=5)
lines(fun, col="red", lwd=2)
lines(f.x, col="green", lwd=2)
n = 1000
an <- sqrt(2*log(n)) - 0.5*(log(log(n))+log(4*pi))*(2*log(n))^(-1/2)
bn <- (2*log(n))^(-1/2)
f.x <- exp(-x)*exp(-x)*exp(-x)
x2 <- seq(min(x), max(x), length = 1000)
fun <- dnorm(x2, mean = mean(x), sd = sd(x))
for (i in 1:n) {
max_r <- max(rnorm(1000))
normalize[i] <- (max_r-an)/bn
}
scatter.smooth(normalize)
lines(fun, col="red", lwd=2)
lines(f.x, col="green", lwd=2)
n = 1000
an <- sqrt(2*log(n)) - 0.5*(log(log(n))+log(4*pi))*(2*log(n))^(-1/2)
bn <- (2*log(n))^(-1/2)
x1 <- seq(min(x), max(x), length = 1000)
f.x <- exp(-x1)*exp(-x1)*exp(-x1)
x2 <- seq(min(x), max(x), length = 1000)
fun <- dnorm(x2, mean = mean(x), sd = sd(x))
for (i in 1:n) {
max_r <- max(rnorm(1000))
normalize[i] <- (max_r-an)/bn
}
scatter.smooth(normalize)
lines(fun, col="red", lwd=2)
lines(f.x, col="green", lwd=2)
