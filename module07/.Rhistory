library(multtest) # load golub dataset
data(golub)
golub.ALL <- golub[,gol.fac = "ALL"]
golub.ALL <- golub[,gol.fac = "ALL"]
golub.ALL <- golub[*,gol.fac = "ALL"]
golub.ALL <- golub[gol.fac = "ALL"]
golub.ALL
golub.ALL <- golub[808,gol.fac = "ALL"]
gol.fac <- factor(golub.cl, levels=0:1, labels = c("ALL", "AML"))
golub.ALL <- golub[,gol.fac = "ALL"]
golub.ALL <- golub[gol.fac = "ALL"]
golub.ALL
golub.ALL <- golub[2972, gol.fac = "ALL"]
golub.ALL <- golub[2972, gol.fac == "ALL"]
golub.ALL <- golub[gol.fac == "ALL"]
golub.ALL
golub.ALL <- golub[gol.fac == "ALL"]
golub.AML <- golub[gol.fac == "AML"]
diff<-golub.ALL - golub.AML
golub.AML <- golub[gol.fac == "AML"]
diff <- golub.ALL - golub.AML
golub.ALL - golub.AML
golub.ALL - golub.AML
diff
sum(diff>0)
p.values <- apply(golub, 1, function(x) t.test(x)$p.value)
p.bon<-p.adjust(p=p.values, method="bonferroni")
p.fdr<-p.adjust(p=p.values, method="fdr")
p.fdr
golub.ALL <- golub[gol.fac == "ALL", p.fdr > 0.05]
golub.ALL
golub.ALL <- golub[gol.fac == "ALL", p.fdr > 0.05]
golub.ALLp <- golub[gol.fac == "ALL", p.fdr > 0.05]
golub.ALLp
diff <- golub.ALL - golub.AML
binom.test(x=sum(diff>0), n=length(diff), p=0.5, alternative = "two.sided")
p.values <- apply(golub, 1, function(x) t.test(x)$p.value)
p.fdr<-p.adjust(p=p.values, method="fdr")
golub.ALL <- golub[gol.fac == "ALL"]
golub.AML <- golub[gol.fac == "AML"]
diff <- golub.ALL - golub.AML
binom.test(x=sum(diff>0), n=length(diff), p=0.5, alternative = "two.sided")
n.disc <- apply(p.values,1,function(x) sum(x<0.05))
n.disc
p.values
golub[]
golub[,]
golub
golub ~ gol.fac
wilcox.test(golub ~ gol.fac)
wilcox.test(golub[] ~ gol.fac)
wilcox.test(x=golub.ALL, y=golub.AML, alternative = "two.sided")
w.test <- wilcox.test(x=golub.ALL, y=golub.AML, alternative = "two.sided")
p.values <- w.test$p.value
p.values
diff <- golub.ALL-golub.AML
diff
golub.ALL
diff <- golub.ALL-golub.AML
binom.test(x=sum(diff>0),n=length(diff),p=0.5,alternative="two.sided")
golub.ALL.p <- apply(golub.ALL,1,function(x) t.test(x)$p.value)
golub.ALL.p <- apply(golub.ALL,1,function(x) t.test(x)$p.value)
golub.p <- apply(golub,1, function(x) t.test(x)$p.value)
golub.p <- apply(golub,1, function(x) t.test(x)$p.value)
golub.fdr <- p.adjust(p=golub.p, method = "FDR")
golub.p <- apply(golub,1, function(x) t.test(x)$p.value)
golub.fdr <- p.adjust(p=golub.p, method = "fdr")
golub.fdr
golub.p <- apply(golub,1, function(x) t.test(x)$p.value)
golub.fdr <- p.adjust(p=golub.p, method = "fdr")
golub.adj <- merge(golub,golub.fdr)
q
p.values<- apply(golub,1,function(x) t.test(x)$p.value)
p.values
p.fdr <- p.adjust(p=p.values, method="fdr")
p.fdr
binom.test(x=sum(diff>0),n=length(diff),p=0.5,alternative = "two.sided")
diff
golub.test <- binom.test(x=sum(diff>0),n=length(diff),p=0.5,alternative = "two.sided")
p.values <- golub.test$p.value
p.values
p.values <- golub.test$p.value
p.fdr <- p.adjust(p=p.values, method = "fdr")
p.fdr
apply(golub.ALL,1,function(x) t.test)
apply(golub.ALL,1,function(x) t.test(x))
apply(golub.ALL,1,function(x) t.test(x,mu=0))
lapply(golub.ALL,1,function(x) t.test(x,mu=0))
lapply(golub.ALL,1,function(x) t.test(x))
sapply(golub.ALL,1,function(x) t.test(x))
apply(golub.ALL,1,function(x) t.test(x))
data(golub, package='multtest')
apply(golub.ALL,1,function(x) t.test(x))
p.values<- apply(golub, 1, function(x) t.test(x)$p.value)
p.fdr<-p.adjust(p=p.values, method="fdr")
sum(p.values<0.05)
sum(p.fdr<0.05)
p.values<- apply(golub, 1, function(x) t.test(x))
p.values
p.values<- apply(golub, 1, function(x) t.test(x)$p.value)
unlist(p.values)
p.values<- apply(golub, 1, function(x) t.test(x)$p.value)
type(p.values)
class(p.values)
p.values <- apply(golub,1,function(x) t.test(x)$p.value)
p.fdr <-p.adjust(p=p.values,method = "fdr")
golub.adj <- c()
for (i in length(golub)) {
if (p.fdr[i]>0.05) {
golub.adj <- append(golub[i])
}
}
for (i in length(golub)){
if (p.fdr[i] > 0.05){
golub.adj <- append(golub[i])
}
}
for (i in length(golub)){
if (p.fdr[i] < 0.05){
golub.adj <- append(golub[i])
}
}
for (i in length(golub)){
if (TRUE){
golub.adj <- append(golub[i])
}
}
golub
p.values <- apply(golub,1,function(x) t.test(x)$p.value)
p.fdr <- p.adjust(p=p.values,method = "fdr")
p.fdr
for (i in length(golub)){
if (p.fdr < 0.05){
golub.adj <- append(golub[i])
}
}
for (i in length(golub)){
if (p.fdr[i] < 0.05){
golub.adj <- append(golub[i])
}
}
Sys.getlocale()
for (i in length(golub)){
if (shiny::isTruthy(p.fdr[i] < 0.05)){
golub.adj <- append(golub[i])
}
}
for (i in length(golub)){
if (golub::isTruthy(p.fdr[i] < 0.05)){
golub.adj <- append(golub[i])
}
}
for (i in length(golub)){
if (isTruthy(p.fdr[i] < 0.05)){
golub.adj <- append(golub[i])
}
}
for (i in length(golub)){
if (shiny::isTruthy(p.fdr[i] < 0.05)){
golub.adj <- append(golub[i])
}
}
library(shiny)
install.packages(shiny)
sum(p.fdr>0.05)
p.values <- apply(golub,1,function(x) t.test(x)$p.value)
p.fdr <- p.adjust(p=p.values,method = "fdr")
sum(p.fdr>0.05)
p.values <- apply(golub,1,function(x) t.test(x)$p.value)
sum(p.values)
sum(p.values>0.05)
data(golub)
p.values <- apply(golub,1,function(x) t.test(x)$p.value)
sum(p.values>0.05)
data(golub, package = "multtest")
p.values<- apply(golub, 1, function(x) t.test(x)$p.value)
sum(p.values<0.05)
p.fdr<0.05
golub[1]
golub[1,1]
golub[1,2]
golub.gnames
View(golub.test)
View(golub)
View(golub.gnames)
golub$p.value
diff <- golub.ALL - golub.AML
binom.test(x=sum(diff>0),n=length(diff),p=0.5,alternative = "two.sided")
diff
sum(diff>0)
sort(p.fdr)
sort(p.fdr)[1:3]
View(golub.gnames)
t.test(golub.ALL~golub.AML)
results <- wilcox.test(golub.ALL,golub.AML)
results
golub.ALL[,-1]
results <- wilcox.test(golub.AML,golub.ALL)
results
results <- wilcox.test(golub.ALL,golub.AML, alternative = "greater")
results <- wilcox.test(golub.ALL,golub.AML, alternative = "greater")
p.adjust(p,method="fdr")
results <- wilcox.test(golub.ALL,golub.AML, alternative = "greater")
p.values <- results$p.value
p.adjust(p.values,method="fdr")
library(GSE5859)
golub.gnames[M71540_at]
golub.gnames[1272]
golub.gnames[2910\]
golub.gnames[2910]
golub.gnames[,2910]
golub.gnames[2910,]
teststat = mt.teststat(golub, golub.cl)
require(ggplot2)
plt = ggplot(data.frame(teststat), aes(sample = teststat)) + stat_qq() + theme_bw()
teststat = mt.teststat(golub, golub.cl)
teststat
install.packages(GSE5859)
biocLite('GSE5859')
all <- golub[gol.fac == "ALL"]
aml <- golub[gol.fac == "AML"]
t.test(all~aml)
t.test(all%*%aml)
t.test(all*aml)
all <- golub[gol.fac == "ALL"]
aml <- golub[gol.fac == "AML"]
t.test(all*aml)
results = t.test(all~aml, p.adjust="fdr")
all <- golub[gol.fac == "ALL"]
aml <- golub[gol.fac == "AML"]
t.test(all*aml)
results = t.test(all*aml, p.adjust="fdr")
table(results$p.value < 0.05)
top3 = order(results$p.value)[1:3]
results$genes[top3]
Version()
sessionInfo()
data(golub_train)
results <- wilcox.test(all,aml, alternative = "greater")
p.values <- results$p.value
p.adjust(p.values,method="fdr")
wilcox.test(all,aml, alternative = "greater")
wilcox.AML.pvals[i]  <- wilcox.test(aml.i,all.i)$p.value
wilcox.AML.pvals[i]  <- wilcox.test(aml,all)$p.value
aml.pvals <- wilcox.test(all,aml, alternative = "greater")$p.value
pvals <- c()
for (i in length(golub)) {
pvals[i] <- wilcox.test(all[i],aml[i], alternative = "greater")$p.value
}
pvals
all <- golub[gol.fac == "ALL"]
aml <- golub[gol.fac == "AML"]
wilcox.test(all,aml,alternative = "greater")
library(GSE5859)
results <- apply(all,1,function(x) t.test(x))
results <- t.test(all)
results
results <- apply(golub,1,function(x)t.test(x))
results
table(results$p.value<0.05)
as.table(results$p.value<0.05)
table(results$p.value>0.05)
table(results)
wilcox.test(all,aml,alternative = "greater")
results <- wilcox.test(all,aml,alternative = "greater")
p.values <- results$p.value
p.adj <- p.adjust(p.values, method = "fdr")
sort(results)[1:3]
sort(all)[1:3]
install.packages('gtools')
library(gtools)
all <- golub[gol.fac == "ALL"]
aml <- golub[gol.fac == "AML"]
diff <- all - aml
n.perm=2000
n=length(diff)
W.perm = rep(NA, n.perm)
for(i in 1:n.perm) {
data.perm = sample(c(-1,1), n, replace=T)*diff
W.perm[i] = sum(data.perm>0)
}
W.obs<-sum(diff>0)
hist(W.perm, freq=FALSE, xlim=c(0,30)) #histogram, show proportion instead of frequence (=FALSE), x range 0 to 30
abline(v=W.obs, col=2) #draw a vertical line at the observed statistic
all
aml
wilcox.test(all,aml,paired = T,alternative = "two.sided")
wilcox.test(x=all,y=aml,paired = T,alternative = "two.sided")
wilcox.test(x=all,y=aml,paired = T,alternative = "greater")
diff<-golub[808, ]-golub[1042,]
W.obs<-sum(rank(abs(diff))*(diff>0)) #Observed statistic
n.perm=2000
n=length(diff)
W.perm = rep(NA, n.perm)
for(i in 1:n.perm) {
data.perm = sample(c(-1,1), n, replace=T)*diff #Permuted data
W.perm[i] = sum(rank(abs(data.perm))*(data.perm>0)) #Permuted statistic
}
W.obs
wilcox.test (golub[1042,] ~gol.fac, paired=F, alternative="two.sided")
wilcox.test (golub[,] ~gol.fac, paired=F, alternative="two.sided")
wilcox.test (golub ~gol.fac, paired=F, alternative="two.sided")
wilcox.test (golub[] ~gol.fac, paired=F, alternative="two.sided")
wilcox.test (golub, paired=F, alternative="two.sided")
wilcox.test(x=all,y=aml,paired = F,alternative = "greater")
shapiro.test(aml)
all <- golub[,gol.fac == "ALL"]
aml <- golub[,gol.fac == "AML"]
shapiro.test(aml)
all <- golub[,gol.fac == "ALL"]
aml <- golub[,gol.fac == "AML"]
shapiro.test(aml)
shapiro.test(golub[gol.fac=="AML"])
shapiro.test(golub[,gol.fac=="AML"])
shapiro.test(golub[1042, gol.fac=="ALL"])
pvals <- rep(NA,length(aml))
for (i in length(aml)) {
results <- shapiro.test(golub[i,gol.fac=="AML"])
results.pvals <- results$p.value
p.fdr <- p.adjust(results.pvals,method = "fdr")
}
pvals <- rep(NA,length(aml))
for (i in length(aml)) {
results <- shapiro.test(golub[i,gol.fac=="AML"])
results.pvals <- results$p.value
p.fdr <- p.adjust(results.pvals,method = "fdr")
}
for (i in length(aml)) {
results <- shapiro.test(golub[i,gol.fac=="AML"])
#results.pvals <- results$p.value
#p.fdr <- p.adjust(results.pvals,method = "fdr")
results
}
for (i in length(aml)) {
results <- shapiro.test(golub[,gol.fac="AML"]~)
for (i in length(aml)) {
results <- shapiro.test(golub[,gol.fac="AML"])
#results.pvals <- results$p.value
#p.fdr <- p.adjust(results.pvals,method = "fdr")
results
}
shapiro.test(aml)
aml <- golub[,gol.fac == "AML"]
aml
shapiro.test(golub)
shapiro.test(golub[84])
shapiro.test(golub[84,])
for (i in length(aml)) {
results <- shapiro.test(golub[i,gol.fac="AML"])
results.pvals <- results$p.value
p.fdr <- p.adjust(results.pvals,method = "fdr")
}
pvals <- rep(NA,length(aml))
for (i in length(aml)) {
results <- shapiro.test(aml[i])
results.pvals <- results$p.value
p.fdr <- p.adjust(results.pvals,method = "fdr")
}
golub.gnames
golub.gnames["CD33"]
library(tidyverse)
select(HOXA9)
select("HOXA9"")
q
]
View(golub.gnames)
View(golub.gnames)
View(golub.gnames)
library(multtest) # load golub dataset
data(golub)
gol.fac <- factor(golub.cl, levels=0:1, labels = c("ALL", "AML"))
library(p.adjust)
View(golub.gnames)
golub.gnames[,HOCA9]
golub.gnames[,HOXA9]
golub.gnames[HOXA9]
golub.gnames[1391]
golub.gnames[3189]
golub[1391]
golub.gnames[1391]
wilcox.test(golub[1391,gol.fac=="ALL"],golub[1042,gol.fac=="ALL"])
wilcox.test(golub[1391,gol.fac=="ALL"],golub[1042,gol.fac=="ALL"],paired = F,alternative = "two.sided")
data("UCBAdmissions")
force(UCBAdmissions)
t.test(Male,Female)
t.test("Male","Female")
UCBAdmissions[1]
UCBAdmissions
UCBAdmissions[1,1]
UCBAdmissions[1]
UCBAdmissions[2]
UCBAdmissions[,1]
UCBAdmissions[13]
UCBAdmissions33]
UCBAdmissions[3]
UCBAdmissions$Gender
install.packages(c("ape"),repo="http://cran.r-project.org",dep=TRUE)
chisq.test(UCBAdmissions)
library(ape)
table(read.UCBAdmissions)
table(read.UCBAdmissions(c("Dept")),as.character=TRUE)
fisher.test(UCBAdmissions)
UCBAdmissions
UCBAdmissions
gender <- factor(UCBAdmissions,levels = 0:1,labels = c("Male","Female"))
gender
gol.fac
UCBAdmissions[A]
UCBAdmissions[1]
gender <- factor(UCBAdmissions.cl,levels = 0:1,labels = c("Male","Female"))
UCBAdmissions[1:4]
fisher.test(UCBAdmissions[1:4])
tmp <- UCBAdmissions[1:4]
tmp
type(tmp)
class(tmp)
gene1<-golub[1834,]
all<- gol.fac=="ALL"
aml<- gol.fac=="AML"
testTable<- matrix(c(sum(gene1[all]>1), sum(gene1[all]<=1), sum(gene1[aml]>1), sum(gene1[aml]<=1)), nrow=2, dimnames=list("Gene"=c(">1","<=1"), "Disease"=c("ALL","AML")))
testTable
fisher.test(testTable)
var(all)
gene1 <- golub[1834,]
all<- gol.fac=="ALL"
aml<- gol.fac=="AML"
testTable<- matrix(c(var(gene1[all]>1), var(gene1[all]<=1), var(gene1[aml]>1), var(gene1[aml]<=1)), nrow=2, dimnames=list("Gene"=c(">1","<=1"), "Disease"=c("ALL","AML")))
fisher.test(testTable)
gene1 <- golub[1834,]
all<- gol.fac=="ALL"
aml<- gol.fac=="AML"
testTable<- matrix(c(sum(gene1[all]>1), sum(gene1[all]<=1), sum(gene1[aml]>1), sum(gene1[aml]<=1)), nrow=2, dimnames=list("Gene"=c(">1","<=1"), "Disease"=c("ALL","AML")))
fisher.test(testTable)
var(testTable)
fisher.test(var(testTable))
source("~/MATH7340/module05/hw07.R")
