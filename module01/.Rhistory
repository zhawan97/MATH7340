install.packages(TeachingDemos)
install.packages(teachingdemos)
install.packages("TeachingDemos")
install.packages("Bioconductor")
1 + 2 -3
1 + 2
getwd()
setwd("C:/Users/zhawa/Documents/MATH7340/module01")
getwd()
vec<-c(5,TRUE)
class(vec)
x<-1:4
y<-1:2
x+y
c(1,2) %*% t(c(1,2))
f <- function(x) {
g <- function(y) {
y+z
}
z<-4
x+g(x)
}
z<-15
f(3)
sum <- c(1:1000)
sum
lst <- c(1:1000)
tot <- sum((lst^2))
tot
lst
tot
age <- c(3,25,33,64,48,92,17,44,80,31)
ageByMonth <- age*12
ageByMonth
ageSum <- sum(age)
ageSum
age
age[1]
youngest <- age[1]
for(i in age) {
if age[i] > age[i+1] {
for(i in age) {
if(age[i] > age[i+1]) {
youngest <- age[i+1]
}
}
1 > 2
for(i in 10) {
if(age[i] > age[i+1]) {
youngest <- age[i+1]
}
}
for(i in age) {
if(age[i] < age[i-1]) {
youngest <- age[i]
}
}
for(i in age) {
if(is.na(age[i] < age[i-1])) {
youngest <- age[i]
}
}
youngest
youngest <- age[i]
youngest
age
youngest <- age[1]
youngest
for(i in age) {
if!(is.na(age[i-1]){
for(i in age) {
if(!(is.na(age[i-1])){
for(i in age) {
if(!(is.na(age[i-1])) {
for(i in age) {
if(!(is.na(age[i-1]))
if(age[i] < age[i-1])
for(i in age) {
if(!(is.na(age[i-1])) {
if(!(is.na(age[i-1])) {
if(!(is.na(age[i-1]))
if(age[i] < age[i-1])
for (i in age) {
if (!(is.na(age[i-1]))  {
for (i in age) {
if (!(is.na(age[i-1]))  {
for (i in age) {
if (!(is.na(age[i-1]))
if (age[i] < age[i-1]) {
for (i in age) {
if (!(is.na(age[i-1]))  {
for (i in age) {
if (!(is.na(age[i-1]))  {
for (i in age) {
if (!(is.na(age[i-1]))
if (age[i] < age[i-1])
x <- 2
if (x ==2) {}
if (x ==2) {print("x = 2")
}
y <- 2
q
for (i in age) {
if (!(is.na(age[i-1])) & (age[i] < age[i-1]) {
for (match in matches){
if (match[1] > match[2]){
print("Win")
} else {
print ("Lose")
}
}
matches <- list(c(2,1),c(5,2),c(6,3))
for (match in matches){
if (match[1] > match[2]){
print("Win")
} else {
print ("Lose")
}
}
for (i in age){
if (!(is.na(age[i-1])) & age[i] < age[i-1]){
youngest <- age[i]
}
}
for (i in age) {
if (!(is.na(age[i-1])) & (age[i] < age[i-1]) {
for (i in age){
if (match[1] > match[2]){
print("Win")
} else {
print ("Lose")
}
}
for (i in age) {
if (!(is.na(age[i-1])) & (age[i] < age[i-1])) {
youngest <- age[i]
}
}
q
for (i in age) {
if (is.na(age[i+1])) {
break
}
if (age[i] < age[i+1]) {
youngest <- age[i]
}
}
youngest
for (i in age) {
print(age[i])
if (is.na(age[i+1])) {
break
}
if (age[i] < age[i+1]) {
youngest <- age[i]
}
}
youngest
youngest <- 99999
for (i in age) {
if (is.na(age[i+1])) {
break
}
if (age[i] < age[i+1]) {
youngest <- age[i]
}
}
youngest
youngest <- 99999
for (i in age) {
if (age[i] < youngest) {
youngest <- age[i]
}
}
for (i in age) {
if (age[i] < youngest) {
youngest <- age[i]
i <- i + 1
}
}
youngest <- 99999
for (i in range(1:10)) {
if (age[i] < youngest) {
youngest <- age[i]
}
}
youngest
oldest <- 1
for (i in range(1:10)) {
if (age[i] > oldest) {
oldest <- age[i]
}
}
oldest
oldest <- 1
for (i in range(1:10)) {
if (age[i] > oldest) {
oldest <- age[i]
}
}
oldest
age
calss(age)
class(age)
for (i in range(1:10)) {
if (age[i] > oldest) {
oldest <- age[i]
print(oldest)
}
}
oldest
oldest <- 1
for (i in range(1:10)) {
if (age[i] > oldest) {
oldest <- age[i]
print(oldest)
}
}
oldest
oldest <- 1
for (i in range(1:10)) {
print(oldest)
if (age[i] > oldest) {
oldest <- age[i]
}
}
oldest
age
for (i in range(1:10)) {
print(age[i])
if (age[i] > oldest) {
oldest <- age[i]
}
}
oldest
age
youngest <- 99999
iter <- c(1,2,3,4,5,6,7,8,9,10)
for (i in iter) {
if (age[i] < youngest) {
youngest <- age[i]
}
}
youngest
oldest <- 1
for (i in iter) {
print(age[i])
if (age[i] > oldest) {
oldest <- age[i]
}
}
oldest
ageSquareRoot <- sqrt(age)
ageSquareRoot
X <- numeric(30)  # Initialize an empty numeric vector of length 30
for (k in 1:30) {
X[k] <- 3 * k
}
# Print the values of X
print(X)
y <- numeric(30)
for (i in 1:30) {
y[i] <- 0
}
print(y)
for (k in 1:30) {
if (k < 20) {
Y[k] <- sin(2 * k)
} else if (k >= 20) {
integrand <- function(t) sqrt(t)
integrate(integrand, lower = 0, upper = k)
}
}
Y <- numeric(30)
for (i in 1:30) {
Y[i] <- 0
}
print(Y)
for (k in 1:30) {
if (k < 20) {
Y[k] <- sin(2 * k)
} else if (k >= 20) {
integrand <- function(t) sqrt(t)
integrate(integrand, lower = 0, upper = k)
}
}
print(Y)
Y <- numeric(30)
for (i in 1:30) {
Y[i] <- 0
}
print(Y)
for (k in 1:30) {
if (k < 20) {
Y[k] <- sin(2 * k)
} else if (k >= 20) {
integrand <- function(t) sqrt(t)
integrate(integrand, lower = 0, upper = k, $value)
Y <- numeric(30)
for (i in 1:30) {
Y[i] <- 0
}
print(Y)
for (k in 1:30) {
if (k < 20) {
Y[k] <- sin(2 * k)
} else if (k >= 20) {
integrand <- function(t) sqrt(t)
integrate(integrand, lower = 0, upper = k)
}
}
print(Y,$value)
load("C:/Users/zhawa/Documents/MATH7340/module01/.RData")
pwd
setwd("C:\Users\zhawa\Documents\MATH7340\module02")
setwd(C:\Users\zhawa\Documents\MATH7340\module02)
