library(multtest)
data(golub)
grep("GRO2", golub)
grep("GRO2", golub.gnames)
golub[5762]
golub.gnames[5762]
golub.gnames[,5762]
golub.gnames[5762,]
golub.gnames[5762]
View(golub)
golub[5762,]
golub[5762]
golub[,5762]
golub[5762,1]
golub[5762,2]
grep("GRo2", golub.gnames)
grep("GRO2", golub.gnames)
View(golub.gnames)
golub.gnames[576]
golub.gnames[5765]
GRO2 <- grep("GRO2", golub.gnames)
GRO3 <- grep("GRO3", golub.gnames)
x <- golub[GRO2,]
x <- golub[GRO2]
plot(x,y,xlab=golub.gnames[GRO2,3],ylab=golub.gnames[GRO3,3])
x <- golub[GRO2]
y <- golub[GRO3]
plot(x,y,xlab=golub.gnames[GRO2,3],ylab=golub.gnames[GRO3,3])
golub.gnames[5765]
golub.gnames[5765,1]
golub.gnames[5765,2]
Sys.setenv(LANG="en")
golub.gnames[5765,2]
plot(x,y)
y
x
golub[]
golub.gnames[2508]
grep("GRO2", golub.gnames)
golub.gnames[5765]
golub.gnames[5765,]
golub.gnames[5741,]
golub.gnames[5741]
str(golub)
golub[1042]
golub[1042,]
golub.gnames[1042,]
golub.gnames[2354]
golub.gnames[2354,1]
golub.gnames[2354,2]
golub.gnames[5765]
golub.gnames[5765,0]
golub.gnames[5765]
golub.gnames[6308]
golub.gnames[6308,]
golub.gnames[2714]
golub.gnames[2714,]
grep("GRO2", golub.gnames[,2])
GRO2 <- grep("GRO2", golub.gnames[,2])
GRO3 <- grep("GRO3", golub.gnames[,2])
x <- grep("GRO2", golub.gnames[,2])
y <- grep("GRO3", golub.gnames[,2])
x
plot(golub.gnames[x,],golub.gnames[y,])
grep("GRO2", golub.gnames[,2])
grep("GRO3", golub.gnames[,2]
)
grep("GRO2", golub.gnames[,2])
grep("GRO3", golub.gnames[,2])
plot(x,y,xlab=golub.gnames[2714,3],ylab=golub.gnames[2715,3])
golub[2714,]
golub[2715,]
cor(x,y)
x
x <- golub[2714,] # GRO2
y <- golub[2715,]
plot(x,y,xlab=golub.gnames[2714,3],ylab=golub.gnames[2715,3])
cor(x,y)
?cor.test
cor.test(x,y,conf.level = 0.90)
nboot <- 10000
boot.cor <- matrix(0,nrow = nboot,ncol = 1)
data <- cbind(x,y)
for (i in 1:nboot) {
dat.star <- data[sample(1:nrow(data), replace = TRUE),]
boot.cor[i,] <- cor[dat.star[,1], dat.star[,2]]
}
nboot <- 10000
boot.cor <- matrix(0,nrow = nboot,ncol = 1)
data <- cbind(x,y)
for (i in 1:nboot) {
dat.star <- data[sample(1:nrow(data), replace = TRUE),]
boot.cor[i,] <- cor(dat.star[,1], dat.star[,2])
}
quantile(boot.cor[,1], c(0.025,0.90)
)
quantile(boot.cor[,1], c(0.025,0.95))
quantile(boot.cor[,1], c(0.05,0.95))
grep("Zyxin", golub.gnames[,2])
golub.gnames[2124,]
z <- golub[2124,]
apply(golub, 1, function(x) cor.test(z,x))
cor.test(x,y)$cor
?cor.test
cor.test(x,y)
cor.test(x,y)$statistic
cor.test(x,y)$estimate
cor.values <- apply(golub, 1, function(x) cor.test(z,x)$estimate)
sum(cor.values<-0.5)
cor.values <- apply(golub, 1, function(x) cor.test(z,x)$estimate)
sum(cor.values< -0.5)
names(sort(cor.values[1:5]))
names(sort(cor.values)[1:5])
names(sort(cor.values)[1:5])
cor.values <- apply(golub, 1, function(x) cor.test(z,x)$estimate)
sum(cor.values< -0.5)
names(sort(cor.values)[1:5])
sort(cor.values)[1:5]
?names
names(cor.values)
str(cor.values)
str(cor.values[1])
?cor.test
cor.golub <- apply(golub, 1, function(x) cor.test(z,x))
cor.values <- cor.golub$estimate
cor.values
cor.golub
cor.golub$estimate
cor.values <- apply(golub, 1, function(x) cor.test(z,x)$estimate)
sum(cor.values< -0.5)
names(cor.values)
?name
?names
name(cor.values)
?name
as.symbol(cor.values)
as.symbol(cor.values[1])
as.symbol(cor.values[2])
names(as.name(cor.values))
sort(cor.values)
sort(cor.values)[1:5]
names(as.name(sort(cor.values)[1:5]))
p.values <- apply(golub, 1, function(x) cor.test(z,x)$p.value)
p.fdr <- p.adjust(p=pvalues, method = 'fdr')
pvalues <- apply(golub, 1, function(x) cor.test(z,x)$p.value)
p.fdr <- p.adjust(p=pvalues, method = 'fdr')
sum(p.fdr<0.05)
?cor.test
cor.test(x,y)
cor.test(x,y)$data.name
cor.test(x,y)$p.value
names(cor.test(x,y)$p.value)
cor.test(x,y)$estimate
names(sort(cor.values))
sort(cor.values)
names(sort(cor.values))
cor.values <- apply(golub, 1, function(x) cor.test(z,x)$p.value)
names(cor.values)
cor.values <- apply(golub, 1, function(x) cor.test(x,z)$estimate)
cor.values
sum(cor.values< -0.5)
names(golub)
exprs(golub)
reg.fit <- lm(GRO3 ~ GRO2)
reg.fit
summary(reg.fit)
lm(GRO2 ~ GRO3)
reg.fit <- lm(GRO3 ~ GRO2)
reg.fit
GRO2 <- golub=golub[2714,]
GRO2
golub[2714]
x
x
golub[2714,]
GRO2 <- golub[2714,]
GRO3 <- golub[2715,]
lm(GRO3 ~ GRO2)
reg.fit <- lm(GRO3 ~ GRO2)
summary(reg.fit)
?predict
predict(reg.fit,newdata = data.frame(GRO2=0),interval = "prediction")
predict(reg.fit,newdata = data.frame(GRO2=0),interval = "prediction", level = 0.8)
anova(reg.fit)
qqnorm(resid(reg.fit))
qqline(resid(reg.fit))
shapiro.test(resid(lin.reg))
shapiro.test(resid(reg.fit))
plot(predict(reg.fit),resid(reg.fit))
plot(reg.fit,whcih=1)
plot(reg.fit,whcih=2)
plot(reg.fit,whcih=2)
plot(reg.fit,whcih=1)
log.reg <- lm(log(GRO3) ~ log(GRO2), data = golub)
log.reg <- lm(log(GRO3) ~ log(GRO2))
log.reg <- lm(log(GRO3) ~ log(GRO2))
shapiro.test(resid(log.reg))
plot(log.reg,which=1)
plot(reg.fit,whcih=1)
shapiro.test(resid(reg.fit))
?stackloss
stackloss
reg.stack <- lm(stack.loss ~ stackloss[,1])
stackloss[,1]
stack.x
stack.data <- as.data.frame(stack.x[,c('Air.Flow','Water.Temp','Acid.Conc.')])
ls
names(stack.data) <- c('Air.Flow','Water.Temp','Acid.Conc.')
stack.data
pairs(stack.data)
stack.reg <- lm(stack.loss ~ Air.Flow+Water.Temp+Acid.Conc.)
stack.data <- as.data.frame(stack.x[,c('Air.Flow','Water.Temp','Acid.Conc.')])
names(stack.data) <- c('Air.Flow','Water.Temp','Acid.Conc.')
stack.reg <- lm(stack.loss ~ Air.Flow+Water.Temp+Acid.Conc.)
?stackloss
stack.reg <- lm(stack.loss ~ stack.x)
stack.reg
summary(stack.reg)
predict(stack.reg,newdata = data.frame(Air.Flow=60))
predict(stack.reg,newdata = data.frame(Air.Flow=60),interval = "prediction", level = 0.9)
Air.Flow
stack.x
predict(stack.reg,newdata = Air.Flow=60,interval = "prediction", level = 0.9)
predict(stack.reg,Air.Flow=60,interval = "prediction", level = 0.9)
stack.reg <- lm(stack.loss ~ stack.x, data = stackloss)
summary(stack.reg)
predict(stack.reg, newdata= data.frame(Air.Flow=60),interval = "prediction", level = 0.9)
stack.reg <- lm(stack.loss ~ stack.x, data = stackloss)
summary(stack.reg)
?stackloss
predict(stack.reg, newdata = data.frame(Air.Flow=60))
pairs(stackloss)
predict(stack.reg, newdata = data.frame(stack.xAir.Flow=60))
stack.reg <- lm(stack.loss ~ stack.x, data = stackloss)
summary(stack.reg)
predict(stack.reg, newdata = data.frame(Air.Flow=60),interval = "prediction", level = 0.9)
predict(stack.reg, newdata = data.frame(Air.Flow),interval = "prediction", level = 0.9)
newd <- data.frame(Air.Flow=60)
newd
predict(stack.reg, newdata = newd,interval = "prediction", level = 0.9)
newd <- data.frame(Air.Flow=60, Water.Temp = 20, Acid.Conc = 90)
newd
predict(stack.reg, newdata = newd,interval = "prediction", level = 0.9)
predict(stack.reg, newdata = newd,interval = "confidence", level = 0.9)
