lik <- function(lam) prod(dpois(c(1.433, 0.524, 0.384, 4.515, 1.852, 0.429), lambda=lam))
nlik <- function(lam) -lik(lam)
optim(par=1, nlik)
lik<-function(lam) prod(dpois(c(4,7,2), lambda=lam)) #likelihood function
nlik<-function(lam) -lik(lam) #negative-likelihood function
optim(par=1, nlik) #minimize nlik with starting parameter value=1
lik <- function(lam) prod(dpois(c(1.433, 0.524, 0.384, 4.515, 1.852, 0.429), lambda=lam))
nlik <- function(lam) -lik(lam)
optim(par=1, nlik)
lik<-function(lam) prod(dpois(c(1.433, 0.524, 0.384, 4.515, 1.852, 0.429), lambda=lam))
nlik<-function(lam) -lik(lam)
optim(par=1, nlik)
lik<-function(lam) prod(dpois(c(1.433, 0.524, 0.384, 4.515, 1.852, 0.429), lambda=lam))
nlik<-function(lam) -lik(lam)
optim(par=1, nlik)
lik<-function(lam) prod(dexp(c(1.433, 0.524, 0.384, 4.515, 1.852, 0.429), lambda=lam))
nlik<-function(lam) -lik(lam)
optim(par=1, nlik)
lik<-function(lam) prod(dexp(c(1.433, 0.524, 0.384, 4.515, 1.852, 0.429), lambda=lam))
nlik<-function(lam) -lik(lam)
optim(par=1, nlik)
$par
nloglik<- function(lam) -sum(log(dpois(c(4,7,2), lambda=lam)))
optim(par=1, nloglik)$par
lik<-function(lam) prod(dexp(c(1.433, 0.524, 0.384, 4.515, 1.852, 0.429), lambda=lam))
nlik<-function(lam) -lik(lam)
optim(par=1, nlik)$par
nloglik<- function(lam) -sum(log(dpois(c(1.433, 0.524, 0.384, 4.515, 1.852, 0.429), lambda=lam)))
optim(par=1, nloglik)$par
nloglik<- function(lam) -sum(log(dexp(c(1.433, 0.524, 0.384, 4.515, 1.852, 0.429), lambda=lam)))
optim(par=1, nloglik)$par
print(optim(par=1, nloglik)$par)
lik<-function(lam) prod(dexp(c(1.433,0.524,0.384,4.515,1.852,0.429), lambda=lam))
nlik<-function(lam) -lik(lam)
optim(par=1, nlik)
lik<-function(lam) prod(dexp(c(1.433,0.524,0.384,4.515,1.852,0.429), lambda=lam))
nlik<-function(lam) -lik(lam)
optimize(par=1, nlik)
nloglik<- function(lam) -sum(log(dpois(c(4,7,2), lambda=lam)))
optim(par=1, nloglik)$par
nloglik<- function(lam) -sum(log(dexp(c(1.433,0.524,0.384,4.515,1.852,0.429), lambda=lam)))
optim(par=1, nloglik)$par
nloglik<- function(lam) -sum(log(dexp(c(1.433,0.524,0.384,4.515,1.852,0.429), rate=lam)))
optim(par=1, nloglik)$par
lik<-function(lam) prod(dexp(c(1.433,0.524,0.384,4.515,1.852,0.429), rate=lam))
nlik<-function(lam) -lik(lam)
optim(par=1, nlik)
Xsum <- 1/6
Xsum <- 1/6*sum(1.433, 0.524, 0.384, 4.515, 1.852, 0.429)
print(Xsum)
obs <- c(1.433, 0.524, 0.384, 4.515, 1.852, 0.429)
Xsum <- 1/6*sum(obs)
print(Xsum)
lik<-function(lam) prod(dexp(obs), rate=lam))
lik<-function(lam) prod(dexp(obs), rate=lam)
nlik<-function(lam) -lik(lam)
optim(par=1, nlik)
lik<-function(lam) prod(dexp(c(1.433,0.524,0.384,4.515,1.852,0.429), rate=lam))
nlik<-function(lam) -lik(lam)
optim(par=1, nlik)
Xsum <- 1/6*sum(1.433,0.524,0.384,4.515,1.852,0.429)
print(Xsum)
Xsum <- (1/6)*sum(1.433,0.524,0.384,4.515,1.852,0.429)
print(Xsum)
1/6
div <- 1/6
div*sum(1.433,0.524,0.384,4.515,1.852,0.429)
lik<-function(lam) prod(dexp(c(1.433,0.524,0.384,4.515,1.852,0.429), rate=lam))
nlik<-function(lam) -lik(lam)
optim(par=0, nlik)
lamb <- 1/98.6
print(lamb)
test<-qt(0.975,19)
test
test<-qt(0.975,mu)
mu<-98.6
s<-9.4
test<-qt(0.95,mu)
test
mu<-98.6
s<-9.4
se<-s/(75^.5)
test<-qt(0.95,mu)
lower<-mu-se*test
lower
lower<- -se*test
lower
library(multtest)
data(golub)
grep("Zyxin",golub.gnames[,2])
Zyxin<-golub[2124,]
n<-length(Zyxin)
nboot<-1000
boot.xbar <- rep(NA, nboot)
for (i in 1:nboot) {
data.star <- Zyxin[sample(1:n,replace=TRUE)] #random sample n observations
boot.xbar[i]<-mean(data.star)   #i-th bootstraped mean, save in boot.xbar
}
quantile(boot.xbar,c(0.025,0.975))
Zyxin_ALL<-golub[2124,gol.fac=="ALL"]
zyxin<-golub[2124]
zyxin
Zyxin
zyxin<-golub[2124,]
zyxin
zyxin<-golub[2124,gol.fac=="ALL"]
gol.fac <- factor(golub.cl, levels=0:1, labels = c("ALL", "AML"))
zyxin<-golub[2124,gol.fac=="ALL"]
zyxin
Zyxin_ALL<-golub[2124,gol.fac=="ALL"]
n<-length(Zyxin_ALL)
nboot<-1000
boot.xbar <- rep(NA, nboot)
for (i in 1:nboot) {
data.star <- Zyxin_ALL[sample(1:n,replace=TRUE)] #random sample n observations
boot.xbar[i]<-mean(data.star)   #i-th bootstraped mean, save in boot.xbar
}
quantile(boot.xbar,c(0.025,0.975))
Zyxin_ALL<-golub[2124,gol.fac=="ALL"]
n<-length(Zyxin_ALL)
nboot<-1000
boot.xbar <- rep(NA, nboot)
for (i in 1:nboot) {
data.star <- Zyxin_ALL[sample(1:n,replace=TRUE)] #random sample n observations
boot.xbar[i]<-mean(data.star)   #i-th bootstraped mean, save in boot.xbar
}
quantile(boot.xbar,c(0.025,0.975))
boot.vbar <- rep(NA, nboot)
for (i in 1:nboot) {
data.star <- Zyxin_ALL[sample(1:n,replace=TRUE)] #random sample n observations
boot.vbar[i]<-var(data.star)   #i-th bootstraped var, save in boot.vbar
}
quantile(boot.vbar,c(0.025,0.975))
Zyxin_AML<-golub[2124,gol.fac=="AML"]
n<-length(Zyxin_AML)
nboot<-1000
boot.xbar <- rep(NA, nboot)
for (i in 1:nboot) {
data.star <- Zyxin_AML[sample(1:n,replace=TRUE)] #random sample n observations
boot.xbar[i]<-mean(data.star)   #i-th bootstraped mean, save in boot.xbar
}
quantile(boot.xbar,c(0.025,0.975))
boot.vbar<-rep(NA, nboot)
for (i in 1:nboot) {
data.star <- Zyxin_AML[sample(1:n,replace=TRUE)] #random sample n observations
boot.vbar[i]<-var(data.star)   #i-th bootstraped var, save in boot.vbar
}
quantile(boot.vbar,c(0.025,0.975))
mean(Zyxin_ALL)
sd(Zyxin_ALL)
Zyxin_ALL.mu <- mean(Zyxin_ALL)
Zyxin_ALL.sd <- sd(Zyxin_ALL)
Zyxin_AML.mu <- mean(Zyxin_AML)
Zyxin_AML.sd <- sd(Zyxin_AML)
### ALL mean
test <- qnorm(0.975, mean = Zyxin_ALL.mu, sd = Zyxin_ALL.sd)
test
test <- qnorm(0.975, mean = Zyxin_ALL.mu, sd = Zyxin_ALL.sd)
lower <- Zyxin_ALL.mu - Zyxin_ALL.sd*test
upper <- Zyxin_ALL.mu + Zyxin_ALL.sd*test
lower
upper
test <- qnorm(0.975, mean = Zyxin_AML.mu, sd = Zyxin_AML.sd)
lower <- Zyxin_AML.mu - Zyxin_AML.sd*test
upper <- Zyxin_AML.mu + Zyxin_AML.sd*test
lower
upper
Zyxin_ALL<-golub[2124,gol.fac=="ALL"]
n<-length(Zyxin_ALL)
nboot<-1000
boot.xbar <- rep(NA, nboot)
for (i in 1:nboot) {
data.star <- Zyxin_ALL[sample(1:n,replace=TRUE)] #random sample n observations
boot.xbar[i]<-median(data.star)   #i-th bootstraped mean, save in boot.xbar
}
quantile(boot.xbar,c(0.025,0.975))
Zyxin_AML<-golub[2124,gol.fac=="AML"]
n<-length(Zyxin_AML)
nboot<-1000
boot.xbar <- rep(NA, nboot)
for (i in 1:nboot) {
data.star <- Zyxin_AML[sample(1:n,replace=TRUE)] #random sample n observations
boot.xbar[i]<-median(data.star)   #i-th bootstraped mean, save in boot.xbar
}
quantile(boot.xbar,c(0.025,0.975))
MCsim<- function(nsim, lambda) {
cov1<-cov2<-rep(NA,nsim) # create empty matrices to store data
for (i in 1:nsim) {
x= rpois(50, lambda = lambda) # The question says Poisson
xbar= mean(x) #find mean of x
Xsd= sd(x) # find sd of x
CI1<- xbar + qt(0.05,sqrt(xbar/50)), xbar + qt(0.95,sqrt(xbar/50))
MCsim<- function(nsim, lambda) {
cov1<-cov2<-rep(NA,nsim) # create empty matrices to store data
for (i in 1:nsim) {
x= rpois(50, lambda = lambda) # The question says Poisson
xbar= mean(x) #find mean of x
Xsd= sd(x) # find sd of x
CI1<- c(xbar + qt(0.05,sqrt(xbar/50)), xbar + qt(0.95,sqrt(xbar/50)))
CI2<- c(49*(xsd^2)/qchisq(0.95,49), 49*(xsd^2)/qchisq(0.05,49))
cov1[i]<-(CI1[1]<lambda)&(lambda<CI1[2])
cov2[i]<-(CI2[1]<lambda)&(lambda<CI2[2])
}
print(paste("When lambda=", lambda, ": coverage for first CI is", mean(cov1), ", coverage for second CI is", mean(cov2), ".")) # Just to keep your output presentable
}
MCsim(1000,0.5)
MCsim(1000, 0.1)
MCsim<- function(nsim, lambda) {
cov1<-cov2<-rep(NA,nsim) # create empty matrices to store data
for (i in 1:nsim) {
x= rpois(50, lambda = lambda) # The question says Poisson
xbar = mean(x) #find mean of x
Xsd = sd(x) # find sd of x
CI1<- c(xbar + qt(0.05,sqrt(xbar/50)), xbar + qt(0.95,sqrt(xbar/50)))
CI2<- c(49*(xsd^2)/qchisq(0.95,49), 49*(xsd^2)/qchisq(0.05,49))
cov1[i]<-(CI1[1]<lambda)&(lambda<CI1[2])
cov2[i]<-(CI2[1]<lambda)&(lambda<CI2[2])
}
print(paste("When lambda=", lambda, ": coverage for first CI is", mean(cov1), ", coverage for second CI is", mean(cov2), ".")) # Just to keep your output presentable
}
MCsim(1000, 0.1)
MCsim<- function(nsim, lamb) {
cov1<-cov2<-rep(NA,nsim) # create empty matrices to store data
for (i in 1:nsim) {
x= rpois(50, lambda = lamb) # The question says Poisson
xbar = mean(x) #find mean of x
Xsd = sd(x) # find sd of x
CI1<- c(xbar + qt(0.05,sqrt(xbar/50)), xbar + qt(0.95,sqrt(xbar/50)))
CI2<- c(49*(xsd^2)/qchisq(0.95,49), 49*(xsd^2)/qchisq(0.05,49))
cov1[i]<-(CI1[1]<lambda)&(lambda<CI1[2])
cov2[i]<-(CI2[1]<lambda)&(lambda<CI2[2])
}
print(paste("When lambda=", lambda, ": coverage for first CI is", mean(cov1), ", coverage for second CI is", mean(cov2), ".")) # Just to keep your output presentable
}
MCsim(1000, 0.1)
MCsim<- function(nsim, lambda) {
cov1<-cov2<-rep(NA,nsim) # create empty matrices to store data
for (i in 1:nsim) {
x= rpois(50, lambda = lambda) # The question says Poisson
xbar = mean(x) #find mean of x
Xsd = sd(x) # find sd of x }
}
}
MCsim<- function(nsim, lambda) {
cov1<-cov2<-rep(NA,nsim) # create empty matrices to store data
for (i in 1:nsim) {
x= rpois(50, lambda = lambda) # The question says Poisson
xbar = mean(x) #find mean of x
Xsd = sd(x) # find sd of x
#CI1<- c(xbar + qt(0.05,sqrt(xbar/50)), xbar + qt(0.95,sqrt(xbar/50)))
#CI2<- c(49*(xsd^2)/qchisq(0.95,49), 49*(xsd^2)/qchisq(0.05,49))
#cov1[i]<-(CI1[1]<lambda)&(lambda<CI1[2])
#cov2[i]<-(CI2[1]<lambda)&(lambda<CI2[2])
}
#print(paste("When lambda=", lambda, ": coverage for first CI is", mean(cov1), ", coverage for second CI is", mean(cov2), ".")) # Just to keep your output presentable
}
MCsim(1000, 0.1)
MCsim<- function(nsim, lambda) {
cov1<-cov2<-rep(NA,nsim) # create empty matrices to store data
for (i in 1:nsim) {
x= rpois(50, lambda = lambda) # The question says Poisson
xbar = mean(x) #find mean of x
Xsd = sd(x) # find sd of x
CI1<- c(xbar + qt(0.05,sqrt(xbar/50)), xbar + qt(0.95,sqrt(xbar/50)))
#CI2<- c(49*(xsd^2)/qchisq(0.95,49), 49*(xsd^2)/qchisq(0.05,49))
#cov1[i]<-(CI1[1]<lambda)&(lambda<CI1[2])
#cov2[i]<-(CI2[1]<lambda)&(lambda<CI2[2])
}
#print(paste("When lambda=", lambda, ": coverage for first CI is", mean(cov1), ", coverage for second CI is", mean(cov2), ".")) # Just to keep your output presentable
}
MCsim(1000, 0.1)
MCsim<- function(nsim, lambda) {
cov1<-cov2<-rep(NA,nsim) # create empty matrices to store data
for (i in 1:nsim) {
x= rpois(50, lambda = lambda) # The question says Poisson
xbar = mean(x) #find mean of x
Xsd = sd(x) # find sd of x
CI1<- c(xbar + qt(0.05,sqrt(xbar/50)), xbar + qt(0.95,sqrt(xbar/50)))
CI2<- c(49*(xsd^2)/qchisq(0.95,49), 49*(xsd^2)/qchisq(0.05,49))
#cov1[i]<-(CI1[1]<lambda)&(lambda<CI1[2])
#cov2[i]<-(CI2[1]<lambda)&(lambda<CI2[2])
}
#print(paste("When lambda=", lambda, ": coverage for first CI is", mean(cov1), ", coverage for second CI is", mean(cov2), ".")) # Just to keep your output presentable
}
MCsim(1000, 0.1)
MCsim<- function(nsim, lambda) {
cov1<-cov2<-rep(NA,nsim) # create empty matrices to store data
for (i in 1:nsim) {
x= rpois(50, lambda = lambda) # The question says Poisson
xbar = mean(x) #find mean of x
Xsd = sd(x) # find sd of x
CI1<- c(xbar + qt(0.05,sqrt(xbar/50)), xbar + qt(0.95,sqrt(xbar/50)))
CI2<- c(49*(xsd^2)/qchisq(0.95,49), 49*(xsd^2)/qchisq(0.05,49))
cov1[i]<-(CI1[1]<lambda)&(lambda<CI1[2])
cov2[i]<-(CI2[1]<lambda)&(lambda<CI2[2])
}
#print(paste("When lambda=", lambda, ": coverage for first CI is", mean(cov1), ", coverage for second CI is", mean(cov2), ".")) # Just to keep your output presentable
}
MCsim(1000, 0.1)
MCsim(1000, 1)
debugSource("~/MATH7340/module05/hw05.R")
debugSource("~/MATH7340/module05/hw05.R")
debugSource("~/MATH7340/module05/hw05.R")
debugSource("~/MATH7340/module05/hw05.R")
debugSource("~/MATH7340/module05/hw05.R")
debugSource("~/MATH7340/module05/hw05.R")
MCsim<- function(nsim, lambda) {
cov1<-cov2<-rep(NA,nsim) # create empty matrices to store data
for (i in 1:nsim) {
x= rpois(50, lambda = lambda) # The question says Poisson
xbar = mean(x) #find mean of x
Xsd = sd(x) # find sd of x
CI1<- c(xbar + qt(0.05,sqrt(xbar/50)), xbar + qt(0.95,sqrt(xbar/50)))
CI2<- c(49/qchisq(0.95,49), 49/qchisq(0.05,49))
cov1[i]<-(CI1[1]<lambda)&(lambda<CI1[2])
cov2[i]<-(CI2[1]<lambda)&(lambda<CI2[2])
}
print(paste("When lambda=", lambda, ": coverage for first CI is", mean(cov1), ", coverage for second CI is", mean(cov2), ".")) # Just to keep your output presentable
}
MCsim(1000,0.1)
